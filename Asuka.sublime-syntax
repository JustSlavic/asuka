%YAML 1.2
---
name: Asuka
scope: source.c++

file_extensions:
  - cpp
  - hpp

variables:
  bin_digit: '[01'']'
  oct_digit: '[0-7'']'
  dec_digit: '[\d'']'
  hex_digit: '[\h'']'

  dec_digits: '(?:\d(?:{{dec_digit}}*\d)?)'

  # number exponents
  dec_exponent: '(?:[eE][-+]?{{dec_digit}}*)'
  hex_exponent: '(?:[pP][-+]?{{dec_digit}}*)'

  # number suffixes
  # note: nearly everything can be defined as suffix
  # a) see user literals
  #    https://en.cppreference.com/w/cpp/language/user_literal
  # b) see complex `operator` keyword
  #    https://en.cppreference.com/w/cpp/numeric/complex/operator%22%22i
  bin_suffix: '[2-9a-zA-Z_][[:alnum:]_]*'
  oct_suffix: '[8-9g-zG-Z_][[:alnum:]_]*'
  dec_suffix: '[a-zA-Z_][[:alnum:]_]*'
  hex_suffix: '[g-zG-Z_][[:alnum:]_]*'
  float_suffix: '[fF]'
  integer_suffix: '[lL]{1,2}[uU]?|[uU][lL]{0,2}'
  double_suffix: '[fFlL]'

  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b' # upper and lowercase
  operator_keywords: 'and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|xor|xor_eq|noexcept'
  control_keywords: 'break|case|catch|continue|default|do|else|for|goto|if|_Pragma|switch|throw|try|while|{{coroutine_keywords}}'
  coroutine_keywords: 'co_(?:await|return|yield)'
  non_func_keywords: 'if|for|switch|while|decltype|sizeof|__declspec|__attribute__|typeid|alignof|alignas|static_assert'

  asuka_types: 'b32|i8|i16|i32|i64|u8|u16|u32|u64|f32|f64|v2|v3|v4|color24|color32|rect2|rect3'

contexts:
  main:
    - include: global-things

  unique-keywords:
    - match: \bbreak\b
      scope: keyword.control.flow.break.c++
    - match: \bcontinue\b
      scope: keyword.control.flow.continue.c++
    - match: \bgoto\b
      scope: keyword.control.flow.goto.c++
    - match: \breturn\b
      scope: keyword.control.flow.return.c++
    - match: \bthrow\b
      scope: keyword.control.flow.throw.c++
    - match: \b({{control_keywords}})\b
      scope: keyword.control.c++
    - match: '\bdelete\b(\s*\[\])?|\bnew\b(?!])'
      scope: keyword.control.c++
    - match: \b({{operator_keywords}})\b
      scope: keyword.operator.word.c++

  strings:
    - match: '(L|u|U)?(")'
      captures:
        1: storage.type.string.c
        2: punctuation.definition.string.begin.c
      push:
        - meta_scope: string.quoted.double.c
        - include: string-escape-char
        - match: '"'
          scope: punctuation.definition.string.end.c
          pop: true

  char:
    - match: '('')'
      scope: punctuation.definition.string.begin.c
      push:
        - meta_scope: string.quoted.single.c
        - include: string-escape-char
        - match: '('')'
          scope: punctuation.definition.string.end.c
          pop: true

  string-escape-char:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.c
    - match: \\(?:\\|[abefnrtv\'"?]|[0-3][0-9]{0,2}|[4-7][0-9]?|x[a-fA-F0-9]+|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})
      scope: constant.character.escape.c
    - match: \\.
      scope: invalid.illegal.unknown-escape.c

  comments:
    - match: '/\*'
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.block.c
        - match: '\*/'
          scope: punctuation.definition.comment.c
          pop: true
        - include: comment-notes
    - match: '\*/(?!\*)'
      scope: invalid.illegal.stray-comment-end.c
    - match: '//'
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.line.double-slash.c
        - match: '(\\)$'
          captures:
            1: punctuation.separator.continuation.c
        - match: '$'
          pop: true
        - include: comment-notes

  comment-notes:
    - match: '@todo:?'
      scope: comment.todo
    - match: '@note:?'
      scope: comment.note
    - match: '@nocommit\b'
      scope: comment.nocommit
    - match: '@\w+:?'
      scope: comment.at

  operators:
    - match: (?:\+\+|--)
      scope: keyword.operator.arithmetic.c
    - match: '->'
      scope: punctuation.accessor.c
    - match: \+\=|-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\=
      scope: keyword.operator.assignment.augmented.c
    - match: <<|>>|&&|\|\|
      scope: keyword.operator.arithmetic.c
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.c
    - match: \+|\-|/|%|\||\^|~|!
      scope: keyword.operator.arithmetic.c
    # These two operator can be both arithmetic and pointer/address related
    - match: \*|&
      scope: keyword.operator.c
    - match: \=
      scope: keyword.operator.assignment.c
    # Negative lookahead prevents match :: when included in C++
    # - match: '\?|:(?!:)'
    #   scope: keyword.operator.ternary.c
    - match: '\.\.\.'
      scope: keyword.operator.variadic.c

  punctuation:
    - match: '[\.::\(\),;\[\]]'
      scope: punctuation

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.c
      push:
        - meta_scope: meta.block.c
        - match: '\}'
          scope: punctuation.section.block.end.c
          pop: true
        # - match: (?=^\s*#\s*(elif|else|endif)\b)
        #   pop: true
        - include: block
        - include: local-things

  function-declaration:
    - match: '(?:[[:alpha:]_][[:alnum:]_²]*)\s*(?=\()'
      scope: meta.function.c++ entity.name.function.c++
    - match: '\b(operator\s+(:?\+|\-|\*|\/|\=\=|\!\=|\+\=|\-\=|\*\=|\/\=|\[\]))\s*(?=\()'
      scope: meta.function.c++ entity.name.function.c++

  function-call:
    - match: '(?:[[:alpha:]_][[:alnum:]_²]*)\s*(?=\()'
      scope: meta.function-call.c++
    - match: '\b(operator\s+(:?\+|\-|\*|\/|\=\=|\!\=|\+\=|\-\=|\*\=|\/\=|\[\]))\s*(?=\()'
      scope: meta.function-call.c++

  numbers:
    # Decimal floats
    - match: |-
        (?x:
          \b({{dec_digits}})
          (?:
            ( (\.)
              (?:
                # 1.1, 1.1e1, 1.1e-1, 1.1f, 1.1e1f, 1.1e-1f, 1.1L, 1.1e1L, 1.1e-1L
                {{dec_digit}}+ {{dec_exponent}}?
                # 1.e1, 1.e-1, 1.e1f, 1.e-1f, 1.e1L, 1.e-1L
                | {{dec_exponent}}
                # 1., 1.f, 1.L # but not `..`
                | (?!\.)
              )
              # 1e1 1e1f 1e1L
              | {{dec_exponent}}
            ) ({{double_suffix}})?
            # 1f
            | ({{float_suffix}})
          ) ({{dec_suffix}})?
          # .1, .1e1, .1e-1, .1f, .1e1f, .1e-1f, .1L, .1e1L, .1e-1L
          | ( (\.) {{dec_digit}}+ {{dec_exponent}}? ) (?: ({{double_suffix}}) | ({{dec_suffix}}) )?
        )
      scope: meta.number.float.decimal.c
      captures:
        1: constant.numeric.value.c
        2: constant.numeric.value.c
        3: punctuation.separator.decimal.c
        4: constant.numeric.suffix.c
        5: constant.numeric.suffix.c
        6: invalid.illegal.numeric.suffix.c
        7: constant.numeric.value.c
        8: punctuation.separator.decimal.c
        9: constant.numeric.suffix.c
        10: invalid.illegal.numeric.suffix.c

    # Hexadecimal float (C99)
    - match: \b(0[xX])({{hex_digit}}*(\.){{hex_digit}}*{{hex_exponent}})(?:([fFlL]\b)|({{dec_suffix}}))?
      scope: meta.number.float.hexadecimal.c
      captures:
        1: constant.numeric.base.c
        2: constant.numeric.value.c
        3: punctuation.separator.decimal.c
        4: constant.numeric.suffix.c
        5: invalid.illegal.numeric.suffix.c

    # Binary integer
    - match: \b(0[bB])({{bin_digit}}*)(?:({{integer_suffix}})|({{bin_suffix}}))?
      scope: meta.number.integer.binary.c
      captures:
        1: constant.numeric.base.c
        2: constant.numeric.value.c
        3: constant.numeric.suffix.c
        4: invalid.illegal.numeric.suffix.c

    # Hexadecimal integer
    - match: '\b(0[xX])({{hex_digit}}*)(?:({{integer_suffix}})|({{hex_suffix}}))?'
      scope: meta.number.integer.hexadecimal
      captures:
        1: constant.numeric.base.c
        2: constant.numeric.value.c
        3: constant.numeric.suffix.c
        4: invalid.illegal.numeric.suffix.c

    # Decimal integer
    - match: '\b({{dec_digits}})(?:({{integer_suffix}})|({{dec_suffix}}))?'
      scope: meta.number.integer.decimal.c
      captures:
        1: constant.numeric.value.c
        2: constant.numeric.suffix.c
        3: invalid.illegal.numeric.suffix.c

  constants:
    - match: \b(__func__|NULL|true|false|TRUE|FALSE)\b
      scope: constant.language.c
    - match: \b(__FILE__|__FUNCTION__|__LINE__)\b
      scope: support.constant.c

  asuka-types:
    - match: '\b(?:const\s+)?(?:(void|{{asuka_types}})\b)(?:(?:\s+const(?:\s*[\*\&]))?)*'
      scope: storage.type

  using-alias:
    - match: '\b(using)\s+({{identifier}})'
      captures:
        1: keyword.control.c++
        2: entity.name.type.using.c++
      push:
        # - meta_scope: using-alias-body
        - match: ';'
          scope: punctuation.terminator.c++
          pop: true
        - include: punctuation
        - include: operators

  namespace:
    - match: '\b(namespace)\s+({{identifier}})\s*(\{)'
      captures:
        1: keyword.control.c++
        2: entity.name.namespace.c++
        3: punctuation.section.block.begin.c

  using-namespace:
    - match: '\b(using)\s+(namespace)\b'
      captures:
        1: keyword.control.c++
        2: keyword.control.c++
      push:
        - include: identifiers
        - match: ';'
          scope: punctuation.terminator.c++
          pop: true

  identifiers:
    - match: '(?:(::)\s*)?({{identifier}})\s*(::)\s*'
      captures:
        1: punctuation.accessor.double-colon.c++
        2: entity.name.namespace.c++
        3: punctuation.accessor.double-colon.c++
    - match: '(?:(::)\s*)?({{identifier}})'
      captures:
        1: punctuation.accessor.double-colon.c++
        2: entity.name.namespace.c++

  data-structures:
    - match: '\b(class)\s*({{identifier}})'
      captures:
        1: keyword.declaration.class.c++
        2: entity.name.class.c++
      push: data-structure-body
    - match: '\b(struct)\s*({{identifier}})'
      captures:
        1: keyword.declaration.struct.type.c++
        2: entity.name.struct.c++
      push: data-structure-body
    - match: '\b(enum(?:\s+(?:class|struct))?)\s*({{identifier}})'
      captures:
        1: keyword.declaration.enum.type.c++
        2: entity.name.enum.c++
      push: data-structure-body
    - match: '\b(union)\s*({{identifier}})'
      captures:
        1: keyword.declaration.union.type.c++
        2: entity.name.union.c++
      push: data-structure-body

  data-structure-body:
    - match: ';'
      scope: punctuation.terminator.c++
      pop: true
    - match: '\{'
      push:
        - include: global-things
    - match: '(?=\S)'
      pop: true

  preprocessor:
    - match: '(^#\w+)'
      captures:
        1: meta.preprocessor.c++
      push:
        - meta_scope: debug-preprocessor-body
        - include: line-continuation
        - include: preprocessor-line-ending
        - include: local-things

  line-continuation:
    - match: '(\\)$'
      captures:
        1: punctuation.separator.continuation.c
    - match: '\\(\s+)?$'
      captures:
        1: invalid.illegal.space-after-continuation.c

  preprocessor-line-ending:
    # @todo: That rule makes multiline preprocessor instructions loose its context,
    # instead it becomes just a regulare code.
    - match: '$'
      pop: true

  global-things:
    - include: strings
    - include: char
    - include: comments
    - include: numbers
    - include: unique-keywords
    - include: operators
    - include: punctuation
    - include: namespace
    - include: block
    - include: function-declaration
    - include: asuka-types
    - include: constants
    - include: data-structures
    - include: using-namespace
    - include: using-alias
    - include: preprocessor
    - include: line-continuation

  local-things:
    - include: strings
    - include: char
    - include: comments
    - include: numbers
    - include: unique-keywords
    - include: operators
    - include: punctuation
    - include: block
    - include: function-call
    - include: asuka-types
    - include: constants
    - include: data-structures
    - include: using-namespace
    - include: using-alias
    - include: preprocessor
    - include: line-continuation
